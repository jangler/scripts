#!/usr/bin/env -S csi -ss

;;; Prints stats on https://ecraven.github.io/r7rs-benchmarks/

(import (chicken base)
	(chicken format)
	(chicken io)
	(chicken port)
	(chicken pretty-print)
	(chicken process-context)
	(chicken sort)
	(chicken string)
	srfi-1)

(define (main _)
  ;; Program entry point.
  (let ((args (command-line-arguments)))
    (if (null? args)
	(usage)
	(let* ((path (car args))
	       (records (call-with-input-file path read-csv)))
	  (analyze (clean-fields records) (cdr args))))))

(define (read-csv port)
  ;; Read a CSV file from port, returning a list of lists of strings.
  (define (read-csv-record line)
    (string-split line "," #t))
  (let loop ((lst '()))
    (let ((line (read-line port)))
      (if (eof-object? line)
	  lst
	  (loop (cons (read-csv-record line) lst))))))

(define (clean-fields records)
  ;; Remove extraneous information from CSV fields.
  (map (lambda (rec)
	 (list (strip-suffix "-" (first rec))
	       (strip-suffix ":" (second rec))
	       (third rec)))
       records))

(define (strip-suffix delim field)
  ;; Strip the version suffix from a field.
  (first (string-split field delim)))

(define (analyze records implementations)
  ;; Analyze the data in records for the given implementations.
  (let* ((records (filter (lambda (rec)
			    (any (lambda (imp)
				   (string=? imp (first rec)))
				 implementations))
			  records))
	 (tests (sort (delete-duplicates (map second records))
		      string<?))
	 (completed? (lambda (imp test)
		      (any (lambda (rec)
			     (and (string=? imp (first rec))
				  (string=? test (second rec))
				  (string->number (third rec))))
			   records)))
	 (common-tests (filter (lambda (test)
				 (every (lambda (imp)
					  (completed? imp test))
					implementations))
			       tests))
	 (imp-total-time (lambda (imp)
			   (define (times)
			     (map (compose string->number third)
				  (filter (lambda (rec)
					    (and (string=? imp (first rec))
						 (member (second rec)
							 common-tests)))
					  records)))
			   (reduce + 0 (times))))
	 (uncommon-tests (lset-difference equal? tests common-tests))
	 (imp-incomplete-tests (lambda (imp)
				 (filter (lambda (test)
					   (not (completed? imp test)))
					 uncommon-tests))))
    (pp `((total-times ,@(sort (map (lambda (imp)
				(list imp (imp-total-time imp)))
			      implementations)
			 (lambda (x y)
			   (< (second x) (second y)))))
	  (incomplete ,@(map (lambda (imp)
			       (list imp (imp-incomplete-tests imp)))
			     implementations))))))

(define (usage)
  ;; Print CLI usage instructions.
  (with-output-to-port (current-error-port)
    (lambda ()
      (print "usage: r7rs-benchmark-stats <input.csv> <implementation> ...")))
  (exit 1))
