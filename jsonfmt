#!/usr/bin/env python

import argparse
import json
import os.path
import sys


DESCRIPTION = 'Pretty-print JSON. If no file arguments are given, JSON is ' + \
              'read from standard input and written to standard output.'


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('-c', '--check', action='store_true',
                        help='no-op, only ensure that JSON can be loaded')
    parser.add_argument('-i', '--indent', metavar='spaces', type=int,
                        default=2,
                        help='spaces to write per indent (default: 2)')
    parser.add_argument('files', metavar='file', type=str, nargs='*',
                        help='files to reformat in-place')
    return parser.parse_args()


def die(msg):
    sys.stderr.write('%s: %s\n' % (os.path.basename(sys.argv[0]), msg))
    exit(1)


def format_file(path, indent, check):
    try:
        fp = open(path, 'r')
    except Exception as ex:
        die('%s: %s' % (path, ex))
    try:
        obj = json.load(fp)
    except Exception as ex:
        fp.close()
        die('%s: %s' % (path, ex))
    fp.close()
    if check:
        return
    try:
        fp = open(path, 'w')
    except Exception as ex:
        die('%s: %s' % (path, ex))
    try:
        json.dump(obj, fp, ensure_ascii=False, indent=indent, sort_keys=True)
        fp.write('\n')
    except Exception as ex:
        fp.close()
        die('%s: %s' % (path, ex))
    fp.close()


def format_stdin(indent, check):
    s = sys.stdin.read()
    try:
        obj = json.loads(s)
    except Exception as ex:
        die(ex)
    if check:
        return
    json.dump(obj, sys.stdout, ensure_ascii=False, indent=indent,
              sort_keys=True)
    sys.stdout.write('\n')


def main():
    args = parse_args()
    if args.files:
        for path in args.files:
            format_file(path, args.indent, args.check)
    else:
        format_stdin(args.indent, args.check)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
