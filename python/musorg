#!/usr/bin/env python

import argparse, os.path, subprocess, sys
import taglib # pip install pytaglib

# parse CLI args
parser = argparse.ArgumentParser(description='Organize music files.')
parser.add_argument('files', metavar='FILE', type=str, nargs='+',
        help='file to process')
parser.add_argument('-b', '--bootleg', action='store_true',
        help='organize by artist only')
parser.add_argument('-c', '--copy', action='store_true',
        help='copy files instead of moving')
parser.add_argument('-d', '--dryrun', action='store_true',
        help='dry run; do not move files')
parser.add_argument('-r', '--root', metavar='DIR', type=str,
        default='~/Music', help='root destination directory')
args = parser.parse_args()

required_keys = [['ALBUMARTIST', 'ARTIST']]
if not args.bootleg:
    required_keys += [['ALBUM'], ['TITLE'], ['TRACKNUMBER']]

def discnumber_prefix(tags):
    if 'DISCNUMBER' not in tags:
        return ''
    tokens = tags['DISCNUMBER'][0].split('/')
    return tokens[0] + '-' \
            if len(tokens) > 1 or int(tokens[0]) > 1 \
            else ''

# process files
for path in args.files:
    song = taglib.File(path)
    for group in required_keys:
        if all(key not in song.tags for key in group):
            raise KeyError('{} missing all of {}'.format(path, group))
    if args.bootleg:
        newpath = os.path.join(
            os.path.expanduser(args.root),
            (song.tags['ALBUMARTIST'][0] if 'ALBUMARTIST' in song.tags \
                    else song.tags['ARTIST'][0]).replace('/', '-'),
            '{}.{}'.format(
                song.tags['TITLE'][0].replace('/', '-'),
                path.split('.')[-1]) if 'TITLE' in song.tags \
                        else os.path.basename(path))
    else:
        newpath = os.path.join(
            os.path.expanduser(args.root),
            '{} - {}'.format(
                song.tags['ALBUMARTIST'][0] if 'ALBUMARTIST' in song.tags \
                        else song.tags['ARTIST'][0],
                song.tags['ALBUM'][0]).replace('/', '-'),
            '{}{:02} {}{}.{}'.format(
                discnumber_prefix(song.tags),
                int(song.tags['TRACKNUMBER'][0].split('/')[0]),
                song.tags['ARTIST'][0].replace('/', '-') + ' - ' \
                        if ('ALBUMARTIST' in song.tags \
                        and 'ARTIST' in song.tags \
                        and song.tags['ARTIST'][0].lower() != \
                        song.tags['ALBUMARTIST'][0].lower()) \
                        else '',
                song.tags['TITLE'][0].replace('/', '-'),
                path.split('.')[-1]))
    song.close()
    commands = [['mkdir', '-pv', os.path.dirname(newpath)],
                ['cp' if args.copy else 'mv', '-nv', path, newpath]]
    for cmd in commands:
        if args.dryrun:
            print(' '.join(cmd))
        else:
            subprocess.run(cmd, stdout=sys.stdout, stderr=sys.stderr)
