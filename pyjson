#!/usr/bin/env python

import argparse
import code
import json
import os.path
import sys


DESCRIPTION = 'Enter a Python REPL with JSON files loaded as local variables.'


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('-e', '--eval', metavar='src', type=str,
                        help='evaluate and print src and exit')
    parser.add_argument('-x', '--exec', metavar='src', type=str,
                        help='execute src and exit')
    parser.add_argument('-u', '--unpack', action='store_true',
                        help='unpack top-level dicts into locals')
    parser.add_argument('files', metavar='file', type=str, nargs='+',
                        help='JSON files to load')
    return parser.parse_args()


def die(msg):
    sys.stderr.write('%s: %s\n' % (os.path.basename(sys.argv[0]), msg))
    exit(1)


def load(path):
    try:
        fp = open(path, 'r')
    except Exception as ex:
        die('%s: %s' % (path, ex))
    try:
        obj = json.load(fp)
    except Exception as ex:
        fp.close()
        die('%s: %s' % (path, ex))
    fp.close()
    return obj


def main():
    args = parse_args()
    local = {}
    for path in args.files:
        obj = load(path)
        local[os.path.splitext(os.path.basename(path))[0]] = obj
        if args.unpack and isinstance(obj, dict):
            local.update(obj)
    banner = 'locals: %s' % ', '.join(sorted(local))
    if args.eval:
        print(eval(args.eval, local))
    elif args.exec:
        exec(args.exec, local)
    else:
        code.interact(banner=banner, local=local)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
